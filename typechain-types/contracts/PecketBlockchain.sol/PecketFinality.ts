/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PecketFinalityInterface extends Interface {
  getFunction(
    nameOrSignature: "submitTransaction" | "transactions"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TransactionFinalized"): EventFragment;

  encodeFunctionData(
    functionFragment: "submitTransaction",
    values: [AddressLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "submitTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
}

export namespace TransactionFinalizedEvent {
  export type InputTuple = [
    txHash: BytesLike,
    sender: AddressLike,
    receiver: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    txHash: string,
    sender: string,
    receiver: string,
    amount: bigint
  ];
  export interface OutputObject {
    txHash: string;
    sender: string;
    receiver: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PecketFinality extends BaseContract {
  connect(runner?: ContractRunner | null): PecketFinality;
  waitForDeployment(): Promise<this>;

  interface: PecketFinalityInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  submitTransaction: TypedContractMethod<
    [
      _receiver: AddressLike,
      _amount: BigNumberish,
      _parent1: BytesLike,
      _parent2: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  transactions: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, string, string] & {
        sender: string;
        receiver: string;
        amount: bigint;
        timestamp: bigint;
        parent1: string;
        parent2: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "submitTransaction"
  ): TypedContractMethod<
    [
      _receiver: AddressLike,
      _amount: BigNumberish,
      _parent1: BytesLike,
      _parent2: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transactions"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, bigint, bigint, string, string] & {
        sender: string;
        receiver: string;
        amount: bigint;
        timestamp: bigint;
        parent1: string;
        parent2: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "TransactionFinalized"
  ): TypedContractEvent<
    TransactionFinalizedEvent.InputTuple,
    TransactionFinalizedEvent.OutputTuple,
    TransactionFinalizedEvent.OutputObject
  >;

  filters: {
    "TransactionFinalized(bytes32,address,address,uint256)": TypedContractEvent<
      TransactionFinalizedEvent.InputTuple,
      TransactionFinalizedEvent.OutputTuple,
      TransactionFinalizedEvent.OutputObject
    >;
    TransactionFinalized: TypedContractEvent<
      TransactionFinalizedEvent.InputTuple,
      TransactionFinalizedEvent.OutputTuple,
      TransactionFinalizedEvent.OutputObject
    >;
  };
}
